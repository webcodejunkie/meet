{"version":3,"sources":["mock-data.js","api.js","Event.js","EventList.js","CitySearch.js","NumberOfEvents.js","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["mockData","extractLocations","events","map","event","location","Set","checkToken","accessToken","a","fetch","then","res","json","catch","error","result","getEvents","NProgress","start","window","href","startsWith","done","getAccessToken","token","removeQuery","url","axios","get","data","locations","localStorage","setItem","JSON","stringify","getItem","tokenCheck","removeItem","searchParams","URLSearchParams","search","code","results","authUrl","getToken","history","pushState","pathname","newurl","protocol","host","encodeCode","encodeURIComponent","access_token","Event","state","isCollasped","handleClick","setState","this","props","className","summary","description","created","onClick","Component","EventList","id","CitySearch","query","suggestions","showSuggestions","undefined","handleInputChanged","value","target","filter","toUpperCase","indexOf","handleItemClicked","suggestion","updateEvents","placeholder","type","onChange","onFocus","style","display","options","label","NumberOfEvents","selectedOption","chooseNumberEvents","App","locationEvents","mounted","Boolean","hostname","match","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.2c1201c6.chunk.js","sourcesContent":["const mockData = [\r\n  {\r\n    \"kind\": \"calendar#event\",\r\n    \"etag\": \"\\\"3181161784712000\\\"\",\r\n    \"id\": \"4eahs9ghkhrvkld72hogu9ph3e_20200519T140000Z\",\r\n    \"status\": \"confirmed\",\r\n    \"htmlLink\": \"https://www.google.com/calendar/event?eid=NGVhaHM5Z2hraHJ2a2xkNzJob2d1OXBoM2VfMjAyMDA1MTlUMTQwMDAwWiBmdWxsc3RhY2t3ZWJkZXZAY2FyZWVyZm91bmRyeS5jb20\",\r\n    \"created\": \"2020-05-19T19:17:46.000Z\",\r\n    \"updated\": \"2020-05-27T12:01:32.356Z\",\r\n    \"summary\": \"Learn JavaScript\",\r\n    \"description\": \"Have you wondered how you can ask Google to show you the list of the top ten must-see places in London? And how Google presents you the list? How can you submit the details of an application? Well, JavaScript is doing these. :) \\n\\nJavascript offers interactivity to a dull, static website. Come, learn JavaScript with us and make those beautiful websites.\",\r\n    \"location\": \"London, UK\"\r\n  },\r\n  {\r\n    \"kind\": \"calendar#event\",\r\n    \"etag\": \"\\\"3181159875584000\\\"\",\r\n    \"id\": \"3qtd6uscq4tsi6gc7nmmtpqlct_20200520T120000Z\",\r\n    \"status\": \"confirmed\",\r\n    \"htmlLink\": \"https://www.google.com/calendar/event?eid=M3F0ZDZ1c2NxNHRzaTZnYzdubW10cHFsY3RfMjAyMDA1MjBUMTIwMDAwWiBmdWxsc3RhY2t3ZWJkZXZAY2FyZWVyZm91bmRyeS5jb20\",\r\n    \"created\": \"2020-05-19T19:14:30.000Z\",\r\n    \"updated\": \"2020-05-27T11:45:37.792Z\",\r\n    \"summary\": \"React is Fun\",\r\n    \"description\": \"Love HTML, CSS, and JS? Want to become a cool front-end developer? \\n\\nReact is one of the most popular front-end frameworks. There is a huge number of job openings for React developers in most cities. \\n\\nJoin us in our free React training sessions and give your career a new direction. \",\r\n    \"location\": \"Berlin, Germany\"\r\n  },\r\n\r\n];\r\n\r\nexport { mockData };","import { mockData } from \"./mock-data\";\r\n\r\nimport axios from 'axios';\r\nimport NProgress from 'nprogress';\r\n\r\nexport const extractLocations = (events) => {\r\n  var extractLocations = events.map((event) => event.location);\r\n  var locations = [...new Set(extractLocations)];\r\n  return locations;\r\n};\r\n\r\nconst checkToken = async (accessToken) => {\r\n  const result = await fetch(\r\n    `https://www.googleapis.com/oauth2/v1/tokeninfo?access_token=${accessToken}`\r\n  )\r\n    .then((res) => res.json())\r\n    .catch((error) => error.json());\r\n\r\n  return result;\r\n}\r\n\r\nexport const getEvents = async () => {\r\n  NProgress.start();\r\n\r\n  if (window.location.href.startsWith('http://localhost')) {\r\n    NProgress.done();\r\n    return mockData;\r\n  }\r\n\r\n  const token = await getAccessToken();\r\n\r\n  if (token) {\r\n    removeQuery();\r\n    const url = 'https://0yf1ourm1f.execute-api.us-east-1.amazonaws.com/dev/api/get-events' + '/' + token;\r\n    const result = await axios.get(url);\r\n    if (result.data) {\r\n      var locations = extractLocations(result.data.events);\r\n      localStorage.setItem('lastEvents', JSON.stringify(result.data));\r\n      localStorage.setItem('locations', JSON.stringify(locations));\r\n    }\r\n    NProgress.done();\r\n    return result.data.events;\r\n  }\r\n};\r\n\r\nexport const getAccessToken = async () => {\r\n  const accessToken = localStorage.getItem('access_token');\r\n\r\n  const tokenCheck = accessToken && (await checkToken(accessToken));\r\n\r\n  if (!accessToken || tokenCheck.error) {\r\n    await localStorage.removeItem('access_token');\r\n    const searchParams = new URLSearchParams(window.location.search);\r\n    const code = await searchParams.get('code');\r\n    if (!code) {\r\n      const results = await axios.get('https://0yf1ourm1f.execute-api.us-east-1.amazonaws.com/dev/api/get-auth-url');\r\n      const { authUrl } = results.data;\r\n      return (window.location.href = authUrl);\r\n    }\r\n    return code && getToken(code);\r\n  }\r\n  return accessToken;\r\n}\r\n\r\nconst removeQuery = () => {\r\n  if (window.history.pushState && window.location.pathname) {\r\n    var newurl =\r\n      window.location.protocol +\r\n      '//' +\r\n      window.location.host +\r\n      window.location.pathname;\r\n    window.history.pushState('', '', newurl);\r\n  } else {\r\n    newurl = window.location.protocol + '//' + window.location.host;\r\n    window.history.pushState('', '', newurl);\r\n  }\r\n};\r\n\r\nconst getToken = async (code) => {\r\n  const encodeCode = encodeURIComponent(code);\r\n  const { access_token } = await fetch(\r\n    'https://0yf1ourm1f.execute-api.us-east-1.amazonaws.com/dev/api/token', + '/' + encodeCode\r\n  )\r\n    .then((res) => {\r\n      return res.json();\r\n    })\r\n    .catch((error) => error);\r\n\r\n  access_token && localStorage.setItem('access_token', access_token);\r\n\r\n  return access_token;\r\n}","import React, { Component } from 'react';\r\n\r\nclass Event extends Component {\r\n\r\n  state = {\r\n    isCollasped: true\r\n  }\r\n\r\n  handleClick = () => {\r\n    this.setState({\r\n      isCollasped: !this.state.isCollasped\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const { isCollasped } = this.state\r\n    const { event } = this.props;\r\n    return (\r\n      <div className=\"event\">\r\n        <h3>Event</h3>\r\n        <p>{event.location}</p>\r\n        <p>{event.summary}</p>\r\n        {!isCollasped &&\r\n          <div className={`${this.state.isCollasped ? 'hide' : 'show'}`}>\r\n            <h4>Description</h4>\r\n            <p className='event-description'>{event.description}</p>\r\n            <div>Created: <span>{event.created}</span></div>\r\n          </div>\r\n        }\r\n        <button className={`${this.state.isCollasped ? 'show' : 'hide'}-details`} onClick={this.handleClick}>\r\n          {isCollasped ? 'Show Details' : 'Hide Details'}\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Event;","import React, { Component } from 'react';\r\n\r\nimport Event from './Event';\r\n\r\nclass EventList extends Component {\r\n  render() {\r\n    const { events } = this.props;\r\n    return (\r\n      <ul className=\"EventList\">\r\n        {events.map((event) =>\r\n          <li key={event.id}>\r\n            <Event event={event} />\r\n          </li>\r\n        )}\r\n      </ul>\r\n    );\r\n  }\r\n}\r\n\r\nexport default EventList;","import React, { Component } from 'react';\r\n\r\nclass CitySearch extends Component {\r\n\r\n  state = {\r\n    query: '',\r\n    suggestions: [],\r\n    showSuggestions: undefined\r\n  }\r\n\r\n  handleInputChanged = (event) => {\r\n    const value = event.target.value;\r\n    const suggestions = this.props.locations.filter((location) => {\r\n      return location.toUpperCase().indexOf(value.toUpperCase()) > -1;\r\n    })\r\n    this.setState({\r\n      query: value,\r\n      suggestions,\r\n    });\r\n  }\r\n\r\n  handleItemClicked = (suggestion) => {\r\n    this.setState({\r\n      query: suggestion,\r\n      showSuggestions: false\r\n    });\r\n\r\n    this.props.updateEvents(suggestion);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"CitySearch\">\r\n        <input\r\n          className=\"city\"\r\n          placeholder=\"search city\"\r\n          type=\"text\"\r\n          value={this.state.query}\r\n          onChange={this.handleInputChanged}\r\n          onFocus={() => {\r\n            this.setState({ showSuggestions: true })\r\n          }}\r\n        />\r\n        <ul className=\"suggestions\" style={this.state.showSuggestions ? {} : { display: 'none' }}>\r\n          {this.state.suggestions.map((suggestion) => (\r\n            <li\r\n              key={suggestion}\r\n              onClick={() => this.handleItemClicked(suggestion)}\r\n            >{suggestion}</li>\r\n          ))}\r\n          <li onClick={() => this.handleItemClicked('all')}>\r\n            <b>See all cities</b>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CitySearch;","import React, { Component } from 'react';\r\nimport Select from 'react-select';\r\n\r\n// the different number events that will be shown to be selected, ranging from fixed numbers\r\nconst options = [\r\n  { value: '32', label: '32 Events' },\r\n  { value: '16', label: '16 Events' },\r\n  { value: '8', label: '8 Events' }\r\n];\r\n\r\nclass NumberOfEvents extends Component {\r\n\r\n  // set the state of the select to null by default\r\n  state = {\r\n    selectedOption: null,\r\n  }\r\n  // function to help update the state for the selected option\r\n  chooseNumberEvents = (selectedOption) => {\r\n    this.setState({ selectedOption });\r\n  }\r\n\r\n  render() {\r\n\r\n    const { selectedOption } = this.state;\r\n\r\n    return (\r\n      <div>\r\n        <h3>Choose Number of Events</h3>\r\n        <Select\r\n          value={selectedOption}\r\n          onChange={this.chooseNumberEvents}\r\n          options={options}\r\n          className='event-options' />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default NumberOfEvents;","import React, { Component } from 'react';\r\nimport { extractLocations, getEvents } from './api';\r\n\r\nimport './App.css';\r\nimport './nprogress.css';\r\n\r\nimport EventList from './EventList';\r\nimport CitySearch from './CitySearch';\r\nimport NumberOfEvents from './NumberOfEvents';\r\n\r\nclass App extends Component {\r\n  state = {\r\n    events: [],\r\n    locations: []\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.mounted = true;\r\n    getEvents().then((events) => {\r\n      if (this.mounted) {\r\n        this.setState({ events, locations: extractLocations(events) });\r\n      }\r\n    });\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.mounted = false;\r\n  }\r\n\r\n  updateEvents = (location) => {\r\n    getEvents().then((events) => {\r\n      const locationEvents = (location === 'all') ?\r\n        events :\r\n        events.filter((event) => event.location === location);\r\n      this.setState({\r\n        events: locationEvents\r\n      });\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <CitySearch locations={this.state.locations} updateEvents={this.updateEvents} events={this.state.events} />\r\n        <NumberOfEvents />\r\n        <EventList events={this.state.events} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://cra.link/PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://cra.link/PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://cra.link/PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log('No internet connection found. App is running in offline mode.');\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then((registration) => {\r\n        registration.unregister();\r\n      })\r\n      .catch((error) => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","const reportWebVitals = (onPerfEntry) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://cra.link/PWA\r\nserviceWorkerRegistration.unregister();\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}